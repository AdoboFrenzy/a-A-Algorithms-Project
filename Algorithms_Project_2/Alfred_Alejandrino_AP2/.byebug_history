c
exit
bucket(1).get(1)
bucket(1)
bucket
key
exit
c
cc
c
key
c
node
c
@map[1]
key
c
key
c
key
c
key
c
key
c
key
c
key
c
key
exit
@map.map {|ll| ll}
@map.each {|ll| ll}
@map
@map.each {|node| p node.key}
@map.each {|node| p node}
@map.map {|node| node}
@map.map {|node| node.key}
@map[1]
@map
key
c
node
c
@store
val
key
c
@prc.call(key)
val
@store
new_node
@map
key
c
linkedlist.each {|node| p node.key}
linkedlist.each {|node| p node}
linkedlist
c
linkedlist.each {|node| p node}
linkedlist.each {|node| p node.key}
linkedlist
exit
key.to_s.hash % 8
key.to_s.hash % 20
key.to_s.hash
key.to_s
key
bucket(key).first
bucket(key).first.next
bucket(key).first.prev
bucket(key).first
bucket(key)
c
bucket(key).first.next
bucket(key).first.prev
bucket(key).first
bucket(key)
c
nodes.map {|el| el.val}
nodes.map {|el| el.key}
nodes
c
current_node.next.key
current_node.next
current_node
c
s
current_node.key
c
current_node.key
current_node
c
cc
c
get_node(key).val
get_node(key)
c
get_node(key)
get_node(key).val
c
get_node(key).val
val
get_node(key).val
get_node(key)
get_notde(key)
key
c
current_node
exit
clear
current_node.prev
current_node
c
s
current_node.val
key
current_node.key
s
c
s
key
current_node.key
current_node.val
s
current_node.val
current_node.key
current_node
